generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Recipe {
  id          Int      @id @default(autoincrement())
  title       String
  summary     String
  instructions String
  rawIngredients String // Store original ingredients list as JSON string
  tags        String   @default("[]") // JSON array of tags (vegetarian, dairy free, salad, etc.)
  ingredients  Ingredient[] @relation("RecipeIngredients")
  startSeason  Int      // 1 to 12 (January to December)
  endSeason    Int      // 1 to 12 (January to December)
  grade       Int      @default(0) // 0 to 3 stars
  time        Int      // minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plannedRecipes PlannedRecipe[]
}

model Ingredient {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  startSeason Int      // 1 to 12 (January to December)
  endSeason   Int      // 1 to 12 (January to December)
  recipes     Recipe[] @relation("RecipeIngredients")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MealPlan {
  id        Int      @id @default(autoincrement())
  userId    String   // User identifier for the meal plan
  status    String   @default("active") // active, completed, archived
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plannedRecipes PlannedRecipe[]
  groceryList    GroceryList?
}

model PlannedRecipe {
  id         Int      @id @default(autoincrement())
  mealPlanId Int
  recipeId   Int
  completed  Boolean  @default(false)
  addedAt    DateTime @default(now())
  
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model GroceryList {
  id           Int      @id @default(autoincrement())
  mealPlanId   Int      @unique
  ingredients  String   // JSON string of aggregated ingredients
  checkedItems String   // JSON string of checked item IDs/names
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  mealPlan     MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
}

// URL Import Comparison Tracking Tables
model ComparisonResult {
  id                    String   @id @default(cuid())
  url                   String
  timestamp             DateTime @default(now())
  ollamaResult          String   // JSON stringified ParsingResult
  traditionalResult     String   // JSON stringified ParsingResult
  status                String   @default("pending") // pending, evaluated, archived
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  evaluations           ComparisonEvaluation[]
  
  @@index([status])
  @@index([timestamp])
  @@index([url])
}

model ComparisonEvaluation {
  id                    Int      @id @default(autoincrement())
  comparisonId          String
  technology            String   // "ollama" or "traditional"
  titleAccurate         Boolean?
  ingredientsAccurate   Boolean?
  instructionsAccurate  Boolean?
  overallSuccess        Boolean?
  evaluatorNotes        String?
  evaluatedAt           DateTime @default(now())
  
  // Relations
  comparison            ComparisonResult @relation(fields: [comparisonId], references: [id], onDelete: Cascade)
  
  @@unique([comparisonId, technology])
  @@index([technology])
  @@index([overallSuccess])
}

model PerformanceMetrics {
  id                      Int      @id @default(autoincrement())
  technologyName          String   @unique // "ollama" or "traditional"
  totalTests              Int      @default(0)
  successfulParses        Int      @default(0)
  failedParses            Int      @default(0)
  averageProcessingTime   Float    @default(0) // in milliseconds
  successRate             Float    @default(0) // percentage
  
  // Accuracy breakdown
  titleAccuracyRate       Float    @default(0)
  ingredientsAccuracyRate Float    @default(0)
  instructionsAccuracyRate Float   @default(0)
  overallAccuracyRate     Float    @default(0)
  
  // Processing time statistics
  fastestParse            Float    @default(0)
  slowestParse            Float    @default(0)
  medianProcessingTime    Float    @default(0)
  
  lastUpdated             DateTime @updatedAt
  createdAt               DateTime @default(now())
}